{"version":3,"file":"browser-image-compression.mjs","sources":["../lib/utils.js","../lib/index.js"],"sourcesContent":["/**\n * getDataUrlFromFile\n *\n * @param {File} file\n * @returns {Promise<string>}\n */\nexport function getDataUrlFromFile (file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader()\n    reader.readAsDataURL(file)\n    reader.onload = () => {\n      resolve(reader.result)\n    }\n    reader.onerror = reject\n  })\n}\n\n/**\n * getFilefromDataUrl\n *\n * @param {string} dataurl\n * @param {string} filename\n * @param {number} lastModified\n * @returns {Promise<File|Blob>}\n */\nexport function getFilefromDataUrl (dataurl, filename, lastModified = Date.now()) {\n  return new Promise((resolve) => {\n    const arr = dataurl.split(',')\n    const mime = arr[0].match(/:(.*?);/)[1]\n    const bstr = atob(arr[1])\n    let n = bstr.length\n    const u8arr = new Uint8Array(n)\n    while (n--) {\n      u8arr[n] = bstr.charCodeAt(n)\n    }\n    let file\n    try {\n      file = new File([u8arr], filename, { type: mime }) // Edge do not support File constructor\n    } catch (e) {\n      file = new Blob([u8arr], { type: mime })\n      file.name = filename\n      file.lastModified = lastModified\n    }\n    resolve(file)\n  })\n}\n\n/**\n * loadImage\n *\n * @param {string} src\n * @returns {Promise<HTMLImageElement>}\n */\nexport function loadImage (src) {\n  return new Promise((resolve, reject) => {\n    const img = new Image()\n    img.onload = () => {\n      resolve(img)\n    }\n    img.onerror = reject\n    img.src = src\n  })\n}\n\n/**\n * drawImageInCanvas\n *\n * @param {HTMLImageElement} img\n * @param {string} [maxWidthOrHeight]\n * @returns {HTMLCanvasElement}\n */\nexport function drawImageInCanvas (img, maxWidthOrHeight) {\n  const canvas = document.createElement('canvas')\n  const ctx = canvas.getContext('2d')\n\n  if (Number.isInteger(maxWidthOrHeight) && (img.width > maxWidthOrHeight || img.height > maxWidthOrHeight)) {\n    if (img.width > img.height) {\n      canvas.width = maxWidthOrHeight\n      canvas.height = (img.height / img.width) * maxWidthOrHeight\n    } else {\n      canvas.width = (img.width / img.height) * maxWidthOrHeight\n      canvas.height = maxWidthOrHeight\n    }\n  } else {\n    canvas.width = img.width\n    canvas.height = img.height\n  }\n  ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\n  return canvas\n}","import { drawImageInCanvas, getDataUrlFromFile, getFilefromDataUrl, loadImage } from './utils.js'\n\n/**\n * Compress an image file.\n *\n * @param {File} file\n * @param {number} [maxSizeMB=Number.POSITIVE_INFINITY]\n * @param {number} [maxWidthOrHeight]\n * @returns {Promise.<File>}\n */\nasync function imageCompression (file, maxSizeMB = Number.POSITIVE_INFINITY, maxWidthOrHeight) {\n\n  if (!(file instanceof Blob || file instanceof File)) {\n    throw new Error('The file given is not an instance of Blob or File')\n  } else if (!/^image/.test(file.type)) {\n    throw new Error('The file given is not an image')\n  }\n\n  let remainingTrials = 5\n\n  const maxSizeByte = maxSizeMB * 1024 * 1024\n\n  const dataUrl = await getDataUrlFromFile(file)\n  const img = await loadImage(dataUrl)\n  const canvas = drawImageInCanvas(img, maxWidthOrHeight)\n\n  let quality = 1\n  let compressedFile = await getFilefromDataUrl(canvas.toDataURL(file.type, quality), file.name, file.lastModified)\n  if (file.type === 'image/png') {\n    while (remainingTrials-- && compressedFile.size > maxSizeByte) {\n      canvas.width *= 0.9\n      canvas.height *= 0.9\n\n      const ctx = canvas.getContext('2d')\n      ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\n\n      const compressedDataUrl = canvas.toDataURL(file.type, quality)\n      compressedFile = await getFilefromDataUrl(compressedDataUrl, file.name, file.lastModified)\n    }\n  } else {\n    while (remainingTrials-- && compressedFile.size > maxSizeByte) {\n      canvas.width *= 0.9\n      canvas.height *= 0.9\n\n      const ctx = canvas.getContext('2d')\n      ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\n\n      quality *= 0.9\n      const compressedDataUrl = canvas.toDataURL(file.type, quality)\n      compressedFile = await getFilefromDataUrl(compressedDataUrl, file.name, file.lastModified)\n    }\n  }\n\n  return compressedFile\n\n}\n\nimageCompression.drawImageInCanvas = drawImageInCanvas\nimageCompression.getDataUrlFromFile = getDataUrlFromFile\nimageCompression.getFilefromDataUrl = getFilefromDataUrl\nimageCompression.loadImage = loadImage\n\nexport default imageCompression\n"],"names":["resolve","Promise","dataurl","split","bstr","length","filename","Blob","file","src","img","onerror","maxSizeMB","type","height"],"mappings":"0CAaIA,2LAyBE,IAAAC,gCACAC,EAAAC,qDACAC,EAAKC,wEAaqBC,wBAE5B,IAAAC,yBACAD,qBAGIE,gBAkBaC,8EAMrBC,EAAAC,gBACIF,0TChEkBD,OAAAI,wOAGQC,SAGxB,iVAWAC"}